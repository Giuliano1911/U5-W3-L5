package com.reservation.U5_W3_L5.event;

import com.reservation.U5_W3_L5.auth.AppUserRepository;
import com.reservation.U5_W3_L5.response.CreateResponse;
import jakarta.persistence.EntityExistsException;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeanUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;

import java.util.List;
import java.util.Objects;

@Service
@RequiredArgsConstructor
@Validated
public class EventService {
    private final EventRepository eventRepository;
    private final AppUserRepository appUserRepository;

    public EventResponse eventResponseFromEvent(Event event) {
        EventResponse eventResponse = new EventResponse();
        BeanUtils.copyProperties(event, eventResponse);
        eventResponse.setOrganizer(appUserRepository.findById(event.getOrganizer().getId()).get());
        eventResponse.setParticipants(event.getParticipants().stream()
                .map(participant -> appUserRepository.findById(participant.getId()).get()).toList());
        return eventResponse;
    }

    public List<EventResponse> EventResponseListFromEventList(List<Event> events) {
        return events.stream().map(this::eventResponseFromEvent).toList();
    }

    public List<EventResponse> findAll() {
        return EventResponseListFromEventList(eventRepository.findAll());
    }

    public EventResponse findById(Long id) {
        return eventResponseFromEvent(eventRepository.findById(id).get());
    }

    public Event eventFromEventRequest(@Valid EventRequest eventRequest) {
        Event event = new Event();
        BeanUtils.copyProperties(event, eventRequest);
        event.setOrganizer(appUserRepository.findById(event.getOrganizer().getId()).get());
        event.setParticipants(event.getParticipants().stream()
                .map(participant -> appUserRepository.findById(participant.getId()).get()).toList());
        return event;
    }

    public CreateResponse save(@Valid EventRequest eventRequest) {
        if (eventRepository.existsByTitle(eventRequest.getTitle())) {
            throw new EntityExistsException("Event already exists");
        }
        Event event = eventFromEventRequest(eventRequest);
        event.setOrganizer(appUserRepository.findById(getCurrentUserId()).get());
        eventRepository.save(event);
        return new CreateResponse(event.getId());
    }

    public EventResponse update(Long id, @Valid EventRequest eventRequest) {
        Event event = eventFromEventRequest(eventRequest);
        if (!Objects.equals(event.getOrganizer().getId(), getCurrentUserId())) {
            throw new SecurityException("You are not the organizer of this event");
        }
        event.setOrganizer(appUserRepository.findById(getCurrentUserId()).get());
        event.setId(id);
        return eventResponseFromEvent(eventRepository.save(event));
    }

    public @NotNull Long getCurrentUserId() {
        return appUserRepository.findByUsername(SecurityContextHolder.getContext().getAuthentication().getName()).get().getId();
    }

    public void delete(Long id) {
        Event event = eventRepository.findById(id).get();
        if (!Objects.equals(event.getOrganizer().getId(), getCurrentUserId())) {
            throw new SecurityException("You are not the organizer of this event");
        }
        eventRepository.deleteById(id);
    }
}